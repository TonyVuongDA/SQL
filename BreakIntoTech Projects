--Netflix Data Analytics Project (PostgreSQL)

1. How many movie titles are there in the database? (movies only, not tv shows)

SELECT count(type) 
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info" 
WHERE type='Movie';

2.When was the most recent batch of tv shows and/or movies added to the database?

SELECT MAX(DATE(date_added))
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info";

3. List all the movies and tv shows in alphabetical order.

SELECT type, title
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info" 
WHERE type='Movie'
ORDER BY title asc;

SELECT type, title
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info" 
WHERE type='TV Show'
ORDER BY title asc;

4. Who was the Director for the movie Bright Star?

SELECT people.director
FROM "CharlotteChaze/BreakIntoTech"."netflix_people" AS people
LEFT JOIN "CharlotteChaze/BreakIntoTech"."netflix_titles_info" AS title
ON people.show_id=title.show_id
WHERE title.title='Bright Star';

5. What is the oldest movie in the database and what year was it made?

SELECT title, release_year
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info"
WHERE type='Movie'
ORDER BY release_year asc
LIMIT 1; 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Customer & Order Analytics Project

1. How many orders were placed in January?

SELECT count(orderID) 
FROM BIT_DB.jansales; 

2. How many of those orders were for an iPhone?

SELECT count(orderID) 
FROM BIT_DB.jansales 
WHERE Product='iPhone';

3. Select the customer account numbers for all the orders that were placed in February.

SELECT cust.acctnum  
FROM BIT_DB.customers as cust
INNER JOIN BIT_DB.FebSales as feb
ON cust.order_id=feb.orderID;

4. Which product was the cheapest one sold in January, and what was the price?

SELECT Product, min(price)
FROM BIT_DB.JanSales 
GROUP BY Product, price
ORDER BY price ASC
LIMIT 1;

5. What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).

SELECT SUM(Quantity)*price AS revenue, product
FROM BIT_DB.JanSales
GROUP BY product;

6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT product, sum(quantity), sum(quantity)*price AS revenue
FROM BIT_DB.FebSales
WHERE location='548 Lincoln St, Seattle, WA 98101'
GROUP BY product

7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?

SELECT COUNT(DISTINCT cust.acctnum) AS count, AVG(feb.quantity*feb.price)
FROM BIT_DB.FebSales AS feb
LEFT JOIN BIT_DB.customers AS cust
ON cust.order_id=feb.orderID
WHERE feb.quantity>2;

8. List all the products sold in Los Angeles in February, and include how many of each were sold.

SELECT DISTINCT Product, sum(quantity)
FROM BIT_DB.FebSales 
WHERE location LIKE '%Los Angeles%'
GROUP BY product;

9. Which locations in New York received at least 3 orders in January, and how many orders did they each receive? 

SELECT DISTINCT location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
GROUP BY location
HAVING count(orderID)>=3;

10. How many of each type of headphone were sold in February?

SELECT DISTINCT product, sum(quantity)
FROM BIT_DB.FebSales
WHERE product LIKE '%headphone%'
GROUP BY product;

11. What was the average amount spent per account in February?

SELECT cust.acctnum, avg(feb.price*feb.quantity) AS AVG
FROM BIT_DB.FebSales AS feb
LEFT JOIN BIT_DB.customers AS cust
ON cust.order_id=feb.orderID
GROUP BY cust.acctnum;

12. What was the average quantity of products purchased per account in February? 

SELECT cust.acctnum, feb.product, AVG(feb.quantity)
FROM BIT_DB.FebSales AS feb
LEFT JOIN BIT_DB.customers AS cust
ON feb.orderID=cust.order_ID
GROUP BY cust.acctnum;

13. Which product brought in the most revenue in January and how much revenue did it bring in total?

SELECT product, sum(quantity)*price AS revenue
FROM BIT_DB.JanSales
GROUP BY product 
ORDER BY sum(quantity)*price DESC
LIMIT 1;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Spotify Data
-- For this project, I downloaded Spotify data from Kaggle.
-- Then I created a table to insert Spotify data into.
-- Finally, I performed analytics on the data using SQL. 

--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
  id integer PRIMARY KEY,
  artist_name varchar NOT NULL,
  track_name varchar NOT NULL,
  track_id varchar NOT NULL,
  popularity integer NOT NULL,
  danceability decimal(4,3) NOT NULL,
  energy decimal(4,3) NOT NULL,
  key integer NOT NULL,
  loudness decimal(5,3) NOT NULL,
  mode integer NOT NULL,
  speechiness decimal(5,4) NOT NULL,
  acousticness decimal(6,5) NOT NULL,
  instrumentalness text NOT NULL,
  liveness decimal(5,4) NOT NULL,
  valence decimal(4,3) NOT NULL,
  tempo decimal(6,3) NOT NULL,
  duration_ms integer NOT NULL,
  time_signature integer NOT NULL 
);

--Then I inserted the Spotify Data .csv into the table.
--Next, I explored the data using the following SQL. 

--What is the average popularity, danceability and energy by artist and track? 
SELECT
  artist_name,
  track_name,
  avg(popularity),
  avg(danceability),
  avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

--Who are the top 10 artists based on popularity?
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity DESC
LIMIT 10;

--Which artist released the longest song? 
SELECT artist_name, track_name, duration_ms 
FROM BIT_DB.spotifydata
ORDER BY duration_ms desc
LIMIT 1;

--What's the average danceability for the 10 most popular songs?
SELECT artist_name, track_name, popularity, AVG(danceability)
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY popularity DESC
LIMIT 10;

--How many songs did each artist have?
SELECT artist_name, count(artist_name) AS number_of_song
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY number_of_song DESC;

--CTE/Temp Tables:
--Calculate the average popularity for the artists in the Spotify data table. 
--Then, for every artist with an average popularity of 90 or above, 
--show their name, their average popularity, and label them as a “Top Star”.

WITH popularity_average_CTE AS 
  (
  SELECT s.artist_name,
  AVG(s.popularity) AS average_popularity
  FROM SpotifyData AS s 
  GROUP BY s.artist_name
  )
 
SELECT  artist_name, average_popularity, 'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;



